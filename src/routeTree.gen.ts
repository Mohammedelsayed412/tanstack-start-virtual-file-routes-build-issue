/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NavigationLayoutImport } from './routes/NavigationLayout'
import { Route as homeHomeImport } from './routes/home/home'

// Create/Update Routes

const NavigationLayoutRoute = NavigationLayoutImport.update({
  id: '/_NavigationLayout',
  getParentRoute: () => rootRoute,
} as any)

const homeHomeRoute = homeHomeImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => NavigationLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_NavigationLayout': {
      id: '/_NavigationLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NavigationLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_NavigationLayout/test': {
      id: '/_NavigationLayout/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof homeHomeImport
      parentRoute: typeof NavigationLayoutImport
    }
  }
}

// Create and export the route tree

interface NavigationLayoutRouteChildren {
  homeHomeRoute: typeof homeHomeRoute
}

const NavigationLayoutRouteChildren: NavigationLayoutRouteChildren = {
  homeHomeRoute: homeHomeRoute,
}

const NavigationLayoutRouteWithChildren =
  NavigationLayoutRoute._addFileChildren(NavigationLayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof NavigationLayoutRouteWithChildren
  '/test': typeof homeHomeRoute
}

export interface FileRoutesByTo {
  '': typeof NavigationLayoutRouteWithChildren
  '/test': typeof homeHomeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_NavigationLayout': typeof NavigationLayoutRouteWithChildren
  '/_NavigationLayout/test': typeof homeHomeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/test'
  id: '__root__' | '/_NavigationLayout' | '/_NavigationLayout/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  NavigationLayoutRoute: typeof NavigationLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  NavigationLayoutRoute: NavigationLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_NavigationLayout"
      ]
    },
    "/_NavigationLayout": {
      "filePath": "NavigationLayout.tsx",
      "children": [
        "/_NavigationLayout/test"
      ]
    },
    "/_NavigationLayout/test": {
      "filePath": "home/home.tsx",
      "parent": "/_NavigationLayout"
    }
  }
}
ROUTE_MANIFEST_END */
